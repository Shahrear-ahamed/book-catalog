// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(CUSTOMER)
  contactNo  String
  address    String
  profileImg String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  reviews    Review[]
  orders     Order[]

  @@map("users")
}

model Book {
  id              String        @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate String
  categoryId      String
  category        Category      @relation(fields: [categoryId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt()
  reviews         Review[]
  OrderedBook     OrderedBook[]

  @@map("books")
}

model Category {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  books     Book[]

  @@map("categories")
}

model Review {
  id        String   @id @default(uuid())
  review    String
  rating    Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])

  @@map("reviews")
}

model Order {
  id           String        @id @default(uuid())
  status       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  orderedBooks OrderedBook[]

  @@map("orders")
}

model OrderedBook {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@map("order_books")
}

enum Role {
  ADMIN
  CUSTOMER
}
